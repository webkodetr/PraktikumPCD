/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author USER
 */
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

public class Praktikum11 extends javax.swing.JFrame {

    String sumber;
    BufferedImage gambar;
    Image gambarhasil;
    int ukuranX;
    int ukuranY;
    String gb1 = "Grafik Histogram";

    /**
     * Creates new form Praktikum4
     */
    public Praktikum11() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollBar2 = new javax.swing.JScrollBar();
        jScrollBar1 = new javax.swing.JScrollBar();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Image Analyzer");
        setAlwaysOnTop(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Citra Input");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Citra Output");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Pengaturan Brightness:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Pengaturan Contrast:");

        jScrollBar2.setMaximum(128);
        jScrollBar2.setMinimum(-128);
        jScrollBar2.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        jScrollBar2.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                jScrollBar2AdjustmentValueChanged(evt);
            }
        });

        jScrollBar1.setMaximum(255);
        jScrollBar1.setMinimum(-255);
        jScrollBar1.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        jScrollBar1.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                jScrollBar1AdjustmentValueChanged(evt);
            }
        });

        jLabel7.setText("Posisi Speed : ");

        jLabel8.setText("Thershold :");

        jTextField1.setText("0");
        jTextField1.setName(""); // NOI18N

        jTextField2.setText("0");

        jTextField3.setText("10");

        jLabel9.setText("X");

        jLabel10.setText("Y");

        jMenu1.setText("File");

        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Preprocessing");

        jMenuItem3.setText("Convert To Grayscale");
        jMenuItem3.setToolTipText("");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem5.setText("Equalisasi Histogram");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("View");

        jMenuItem4.setText("Histogram");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem6.setText("Equalis");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuBar1.add(jMenu3);

        jMenu5.setText("Morfologi");

        jMenuItem9.setText("Dilasi");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem9);

        jMenuItem10.setText("Erosi");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem10);

        jMenuBar1.add(jMenu5);

        jMenu6.setText("Deskripsi");

        jMenuItem11.setText("Thinning");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem11);

        jMenuBar1.add(jMenu6);

        jMenu7.setText("Restorasi");

        jMenuItem12.setText("Media Filtering");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem12);

        jMenuBar1.add(jMenu7);

        jMenu8.setText("Sigmentasi");

        jMenuItem7.setText("deteksi topi");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem7);

        jMenuItem8.setText("thresholding");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem8);

        jMenuItem14.setText("Growing");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem14);

        jMenuBar1.add(jMenu8);

        jMenu9.setText("Uas");

        jMenuItem13.setText("Growing");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem13);

        jMenuBar1.add(jMenu9);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(26, 26, 26))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(38, 38, 38)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9))
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser fc = new JFileChooser();
        int open = fc.showOpenDialog(jPanel1);
        if (open == JFileChooser.APPROVE_OPTION) {
            sumber = fc.getSelectedFile().getPath();
            BufferedImage loadImg = loadImage(sumber);
            int x = jLabel1.getWidth();
            int y = jLabel1.getHeight();
            int x1 = jLabel2.getWidth();
            int y1 = jLabel2.getHeight();

            ImageIcon imageIcon1 = new ImageIcon(resize(loadImg, x, y));
            ImageIcon imageIcon2 = new ImageIcon(resize(loadImg, x1, y1));
            jLabel1.setIcon(imageIcon1);
            jLabel2.setIcon(imageIcon2);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        BufferedImage grayscale = rgb2Gray(sumber);
        int x = jLabel2.getWidth();
        int y = jLabel2.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(grayscale, x, y));
        jLabel2.setIcon(imageIcon);

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        BufferedImage loadImg = loadImage(sumber);
        drawHistogram(loadImg, gb1);

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jScrollBar1AdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_jScrollBar1AdjustmentValueChanged
        int cerah = jScrollBar1.getValue();
        BufferedImage hasilBrig = brigthness(sumber, cerah);
        int x = jLabel2.getWidth();
        int y = jLabel2.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(hasilBrig, x, y));
        jLabel2.setIcon(imageIcon);
    }//GEN-LAST:event_jScrollBar1AdjustmentValueChanged

    private void jScrollBar2AdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_jScrollBar2AdjustmentValueChanged
        int cerah = jScrollBar2.getValue();
        BufferedImage hasilBrig = kontras(sumber, cerah);
        int x = jLabel2.getWidth();
        int y = jLabel2.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(hasilBrig, x, y));
        jLabel2.setIcon(imageIcon);
    }//GEN-LAST:event_jScrollBar2AdjustmentValueChanged

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        HistogrEqualisation histEq = new HistogrEqualisation();// pembentukan object histogEqualisation
        BufferedImage gbInput = loadImage(sumber); // membaca input gambar berdasarkan alamat path yg diberikan
        BufferedImage gbEq;                         // deklarasi variabel dengan tipe buffreadImage
        int ukuranX = gbInput.getWidth();           // mengambil jumlah baris
        int ukuranY = gbInput.getHeight();          // mengambil jumlah kolom
        int size = ukuranX * ukuranY;               // menghitung ukuran gambar
        int grayScale[][] = new int[ukuranX][ukuranY]; // inisialisasi matriks grayscale/pembentukan array dua dimensi
        int histogram[] = new int[256];                // inisialisasi matriks histogram
        int cdf[] = new int[256];
        float equalized[] = new float[256];
        float picEqualized[][] = new float[ukuranX][ukuranY];

        grayScale = histEq.ArrayGray(sumber);
        histogram = histEq.histogram(grayScale, ukuranX, ukuranY);
        cdf = histEq.getCDF(histogram);
        equalized = histEq.equalization(cdf, size);
        picEqualized = histEq.gbEqualiz(grayScale, equalized, ukuranX, ukuranY);
        gbEq = histEq.gbHasil(picEqualized, ukuranX, ukuranY);
        int counter = 0;
        int x = jLabel2.getWidth();
        int y = jLabel2.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(gbEq, x, y));
        jLabel2.setIcon(imageIcon);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        HistogrEqualisation histEq = new HistogrEqualisation();
        BufferedImage gbInput = loadImage(sumber);
        BufferedImage gbEq;
        int ukuranX = gbInput.getWidth();
        int ukuranY = gbInput.getHeight();
        int size = ukuranX * ukuranY;
        int grayScale[][] = new int[ukuranX][ukuranY];
        int histogram[] = new int[256];
        int cdf[] = new int[256];
        float equalized[] = new float[256];
        float picEqualized[][] = new float[ukuranX][ukuranY];
        grayScale = histEq.ArrayGray(sumber);
        histogram = histEq.histogram(grayScale, ukuranX, ukuranY);
        cdf = histEq.getCDF(histogram);
        equalized = histEq.equalization(cdf, size);
        picEqualized = histEq.gbEqualiz(grayScale, equalized, ukuranX, ukuranY);
        gbEq = histEq.gbHasil(picEqualized, ukuranX, ukuranY);
        int counter = 0;
        int x = jLabel2.getWidth();
        int y = jLabel2.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(gbEq, x, y));
        jLabel2.setIcon(imageIcon);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    public BufferedImage deteksitepi(String sumber) {
        BufferedImage prosesGambar;
        BufferedImage loadIng = loadImage(sumber);
        ukuranX = loadIng.getWidth();
        ukuranY = loadIng.getHeight();
        prosesGambar = new BufferedImage(ukuranX, ukuranY, BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = prosesGambar.getGraphics();
        g.drawImage(loadIng, 0, 0, null);
        WritableRaster raster = prosesGambar.getRaster();
        for (int x = 1; x < (ukuranX - 1); x++) {
            for (int y = 1; y < (ukuranY - 1); y++) {
                int rgb11 = loadIng.getRGB((x - 1), (y - 1));
                int p11 = (rgb11 >> 8) & 0xff;
                int rgb12 = loadIng.getRGB(x, (y - 1));
                int p12 = (rgb12 >> 8) & 0xff;
                int rgb13 = loadIng.getRGB((x + 1), (y - 1));
                int p13 = (rgb13 >> 8) & 0xff;
                int rgb21 = loadIng.getRGB((x - 1), (y));
                int p21 = (rgb21 >> 8) & 0xff;
                int rgb22 = loadIng.getRGB(x, y);
                int p22 = (rgb22 >> 8) & 0xff;
                int rgb23 = loadIng.getRGB((x + 1), y);
                int p23 = (rgb23 >> 8) & 0xff;
                int rgb31 = loadIng.getRGB((x - 1), (y + 1));
                int p31 = (rgb31 >> 8) & 0xff;
                int rgb32 = loadIng.getRGB(x, (y + 1));
                int p32 = (rgb32 >> 8) & 0xff;
                int rgb33 = loadIng.getRGB((x + 1), (y + 1));
                int p33 = (rgb33 >> 8) & 0xff;
                int tepi = (int) ((p11 * -1) + (p12 * -1) + (p13 * -1)
                        + (p21 * -1) + (p22 * 8) + (p23 * -1)
                        + (p31 * -1) + (p32 * -1) + (p33 * -1));

                if (tepi < 0) {
                    tepi = 0;
                }
                if (tepi > 255) {
                    tepi = 255;
                }
                raster.setSample(x, y, 0, tepi);
            }
        }
        return prosesGambar;
    }


    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        BufferedImage grayscale = deteksitepi(sumber);
        int x = jLabel2.getWidth();
        int y = jLabel2.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(grayscale, x, y));
        jLabel2.setIcon(imageIcon);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    public BufferedImage thresholding(String sumber) {
        int[] histogram = new int[256];
        double variance = 0, totalMean = 0, maxVariance = 0, firstCumuMoment = 0,
                zerothCumuMoment = 0;
        int threshold = 0;
        BufferedImage prosesGambar;
        BufferedImage loadIng = loadImage(sumber);
        ukuranX = loadIng.getWidth();
        ukuranY = loadIng.getHeight();
        prosesGambar = new BufferedImage(ukuranX, ukuranY, BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = prosesGambar.getGraphics();
        g.drawImage(loadIng, 0, 0, null);
        WritableRaster raster = prosesGambar.getRaster();
        for (int i = 0; i < 256; i++) {
            histogram[i] = 0;
        }
        for (int x = 0; x < ukuranX; x++) {
            for (int y = 0; y < ukuranY; y++) {
                int rgb = loadIng.getRGB(x, y);
                int hijaug = (rgb >> 8) & 0xff;
                histogram[hijaug]++;
            }
        }
        double area = (ukuranX * ukuranY);
        for (int k = 0; k < 256; k++) {
            totalMean = totalMean + ((k * histogram[k]) / area);
        }
        for (int j = 0; j < 256; j++) {
            zerothCumuMoment = zerothCumuMoment + histogram[j] / area;
            firstCumuMoment = firstCumuMoment + (j * histogram[j] / area);
            variance = totalMean * zerothCumuMoment - firstCumuMoment;
            variance = variance * variance;
            if ((zerothCumuMoment != 0) && (zerothCumuMoment != 1)) {
                variance = variance / (zerothCumuMoment * (1 - zerothCumuMoment));
                if (maxVariance < variance) {
                    maxVariance = variance;
                    threshold = j;
                }
            }
        }
        for (int x = 0; x < ukuranX; x++) {
            for (int y = 0; y < ukuranY; y++) {
                int rgb = loadIng.getRGB(x, y);
                int hijaug = (rgb >> 8) & 0xff;
                if (hijaug >= threshold) {
                    rgb = 255;
                } else if (hijaug < threshold) {
                    rgb = 0;
                }
                raster.setSample(x, y, 0, rgb);
            }
        }
        return prosesGambar;
    }

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        BufferedImage grayscale = thresholding(sumber);
        int x = jLabel2.getWidth();
        int y = jLabel2.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(grayscale, x, y));
        jLabel2.setIcon(imageIcon);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    public BufferedImage dilasi(String sumber) {
        BufferedImage prosesGambar;
        BufferedImage loadIng = loadImage(sumber);
        ukuranX = loadIng.getWidth();
        ukuranY = loadIng.getHeight();
        prosesGambar = new BufferedImage(ukuranX, ukuranY,
                BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = prosesGambar.getGraphics();
        g.drawImage(loadIng, 0, 0, null);
        WritableRaster raster = prosesGambar.getRaster();
        for (int x = 1; x < (ukuranX - 1); x++) {
            for (int y = 1; y < (ukuranY - 1); y++) {
                int rgb22 = loadIng.getRGB(x, y);
                int p1 = (rgb22 >> 8) & 0xff;
                if (p1 == 0) {
                    raster.setSample(x - 1, y - 1, 0, 0);
                    raster.setSample(x, y - 1, 0, 0);
                    raster.setSample(x + 1, y - 1, 0, 0);
                    raster.setSample(x - 1, y, 0, 0);
                    raster.setSample(x + 1, y, 0, 0);
                    raster.setSample(x - 1, y + 1, 0, 0);
                    raster.setSample(x, y + 1, 0, 0);
                    raster.setSample(x + 1, y + 1, 0, 0);
                }
            }
        }
        return prosesGambar;
    }

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        BufferedImage grayscale = dilasi(sumber);
        int x = jLabel2.getWidth();
        int y = jLabel2.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(grayscale, x, y));
        jLabel2.setIcon(imageIcon);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    public BufferedImage erosi(String sumber) {
        BufferedImage prosesGambar;
        BufferedImage loadIng = loadImage(sumber);
        ukuranX = loadIng.getWidth();
        ukuranY = loadIng.getHeight();
        prosesGambar = new BufferedImage(ukuranX, ukuranY,
                BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = prosesGambar.getGraphics();
        g.drawImage(loadIng, 0, 0, null);
        WritableRaster raster = prosesGambar.getRaster();
        for (int x = 1; x < (ukuranX - 1); x++) {
            for (int y = 1; y < (ukuranY - 1); y++) {
                int rgb11 = loadIng.getRGB((x - 1), (y - 1));
                int p9 = (rgb11 >> 8) & 0xff;
                int rgb12 = loadIng.getRGB(x, (y - 1));
                int p2 = (rgb12 >> 8) & 0xff;
                int rgb13 = loadIng.getRGB((x + 1), (y - 1));
                int p3 = (rgb13 >> 8) & 0xff;
                int rgb21 = loadIng.getRGB((x - 1), (y));
                int p8 = (rgb21 >> 8) & 0xff;
                int rgb22 = loadIng.getRGB(x, y);
                int p1 = (rgb22 >> 8) & 0xff;
                int rgb23 = loadIng.getRGB((x + 1), y);
                int p4 = (rgb23 >> 8) & 0xff;
                int rgb31 = loadIng.getRGB((x - 1), (y + 1));
                int p7 = (rgb31 >> 8) & 0xff;
                int rgb32 = loadIng.getRGB(x, (y + 1));
                int p6 = (rgb32 >> 8) & 0xff;
                int rgb33 = loadIng.getRGB((x + 1), (y + 1));
                int p5 = (rgb33 >> 8) & 0xff;
                if ((p2 != 0) | (p3 != 0) | (p4 != 0) | (p5 != 0)
                        | (p6 != 0) | (p7 != 0) | (p8 != 0) | (p9 != 0)) {
                    raster.setSample(x, y, 0, 255);
                }
            }
        }
        return prosesGambar;
    }

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        BufferedImage grayscale = erosi(sumber);
        int x = jLabel2.getWidth();
        int y = jLabel2.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(grayscale, x, y));
        jLabel2.setIcon(imageIcon);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    public BufferedImage thinning(String sumber) {
        BufferedImage prosesGambar;
        BufferedImage loadIng = loadImage(sumber);
        ukuranX = loadIng.getWidth();
        ukuranY = loadIng.getHeight();
        int Bufferku[][] = new int[ukuranX][ukuranY];
        prosesGambar = new BufferedImage(ukuranX, ukuranY,
                BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = prosesGambar.getGraphics();
        g.drawImage(loadIng, 0, 0, null);
        WritableRaster raster = prosesGambar.getRaster();
        double hapus = 0;
        for (int x = 0; x < ukuranX; x++) {
            for (int y = 0; y < ukuranY; y++) {
                int rgb22 = loadIng.getRGB(x, y);
                int pixel = (rgb22 >> 8) & 0xff;
                Bufferku[x][y] = pixel;
            }
        }
        do {
// Step 1 & 2
            hapus = 0;
            for (int x = 1; x < (ukuranX - 1); x++) {
                for (int y = 1; y < (ukuranY - 1); y++) {
                    int p9 = Bufferku[x - 1][y - 1];
                    int p2 = Bufferku[x][y - 1];
                    int p3 = Bufferku[x + 1][y - 1];
                    int p8 = Bufferku[x - 1][y];
                    int p1 = Bufferku[x][y];
                    int p4 = Bufferku[x + 1][y];
                    int p7 = Bufferku[x - 1][y + 1];
                    int p6 = Bufferku[x][y + 1];
                    int p5 = Bufferku[x + 1][y + 1];
                    int np1 = 0;
                    if (p2 == 0) {
                        np1++;
                    }
                    if (p3 == 0) {
                        np1++;
                    }
                    if (p4 == 0) {
                        np1++;
                    }
                    if (p5 == 0) {
                        np1++;
                    }
                    if (p6 == 0) {
                        np1++;
                    }
                    if (p7 == 0) {
                        np1++;
                    }
                    if (p8 == 0) {
                        np1++;
                    }
                    if (p9 == 0) {
                        np1++;
                    }
                    int tp1 = 0;
                    if ((p2 == 255) && (p3 == 0)) {
                        tp1++;
                    }
                    if ((p3 == 255) && (p4 == 0)) {
                        tp1++;
                    }
                    if ((p4 == 255) && (p5 == 0)) {
                        tp1++;
                    }
                    if ((p5 == 255) && (p6 == 0)) {
                        tp1++;
                    }
                    if ((p6 == 255) && (p7 == 0)) {
                        tp1++;
                    }
                    if ((p7 == 255) && (p8 == 0)) {
                        tp1++;
                    }
                    if ((p8 == 255) && (p9 == 0)) {
                        tp1++;
                    }
                    if ((p9 == 255) && (p2 == 0)) {
                        tp1++;
                    }
                    if ((p1 == 0) && ((np1 >= 2) && (np1 <= 6)) && (tp1 == 1) && ((p2 * p4 * p6) == 0) && ((p4 * p6 * p8) == 0)) {
                        Bufferku[x][y] = 255;
                        hapus++;
                    }
                }
            }
            hapus = 0;
// Step 3 & 4
            for (int x = 1; x < (ukuranX - 1); x++) {
                for (int y = 1; y < (ukuranY - 1); y++) {
                    int p9 = Bufferku[x - 1][y - 1];
                    int p2 = Bufferku[x][y - 1];
                    int p3 = Bufferku[x + 1][y - 1];
                    int p8 = Bufferku[x - 1][y];
                    int p1 = Bufferku[x][y];
                    int p4 = Bufferku[x + 1][y];
                    int p7 = Bufferku[x - 1][y + 1];
                    int p6 = Bufferku[x][y + 1];
                    int p5 = Bufferku[x + 1][y + 1];
                    int np1 = 0;
                    if (p2 == 0) {
                        np1++;
                    }
                    if (p3 == 0) {
                        np1++;
                    }
                    if (p4 == 0) {
                        np1++;
                    }
                    if (p5 == 0) {
                        np1++;
                    }
                    if (p6 == 0) {
                        np1++;
                    }
                    if (p7 == 0) {
                        np1++;
                    }
                    if (p8 == 0) {
                        np1++;
                    }
                    if (p9 == 0) {
                        np1++;
                    }
                    int tp1 = 0;
                    if ((p2 == 255) && (p3 == 0)) {
                        tp1++;
                    }
                    if ((p3 == 255) && (p4 == 0)) {
                        tp1++;
                    }
                    if ((p4 == 255) && (p5 == 0)) {
                        tp1++;
                    }
                    if ((p5 == 255) && (p6 == 0)) {
                        tp1++;
                    }
                    if ((p6 == 255) && (p7 == 0)) {
                        tp1++;
                    }
                    if ((p7 == 255) && (p8 == 0)) {
                        tp1++;
                    }
                    if ((p8 == 255) && (p9 == 0)) {
                        tp1++;
                    }
                    if ((p9 == 255) && (p2 == 0)) {
                        tp1++;
                    }
                    if ((p1 == 0) && ((np1 >= 2) && (np1 <= 6)) && (tp1 == 1) && ((p2 * p4 * p8) == 0) && ((p2 * p6 * p8) == 0)) {
                        Bufferku[x][y] = 255;
                        hapus++;
                    }
                }
            }
        } while (hapus == 0);
        for (int x = 0; x < ukuranX; x++) {
            for (int y = 0; y < ukuranY; y++) {
                raster.setSample(x, y, 0, Bufferku[x][y]);
            }
        }
        return prosesGambar;
    }


    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        BufferedImage grayscale = thinning(sumber);
        int x = jLabel2.getWidth();
        int y = jLabel2.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(grayscale, x, y));
        jLabel2.setIcon(imageIcon);

    }//GEN-LAST:event_jMenuItem11ActionPerformed

    public BufferedImage medianfilter(String sumber) {
        int p[] = new int[9];
        BufferedImage prosesGambar;
        BufferedImage loadIng = loadImage(sumber);
        ukuranX = loadIng.getWidth();
        ukuranY = loadIng.getHeight();
        prosesGambar = new BufferedImage(ukuranX, ukuranY,
                BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = prosesGambar.getGraphics();
        g.drawImage(loadIng, 0, 0, null);
        WritableRaster raster = prosesGambar.getRaster();
        for (int x = 1; x < (ukuranX - 1); x++) {
            for (int y = 1; y < (ukuranY - 1); y++) {
                int rgb11 = loadIng.getRGB((x - 1), (y - 1));
                p[0] = (rgb11 >> 8) & 0xff;
                int rgb12 = loadIng.getRGB(x, (y - 1));
                p[1] = (rgb12 >> 8) & 0xff;
                int rgb13 = loadIng.getRGB((x + 1), (y - 1));
                p[2] = (rgb13 >> 8) & 0xff;
                int rgb21 = loadIng.getRGB((x - 1), (y));
                p[3] = (rgb21 >> 8) & 0xff;
                int rgb22 = loadIng.getRGB(x, y);
                p[4] = (rgb22 >> 8) & 0xff;
                int rgb23 = loadIng.getRGB((x + 1), y);
                p[5] = (rgb23 >> 8) & 0xff;
                int rgb31 = loadIng.getRGB((x - 1), (y + 1));
                p[6] = (rgb31 >> 8) & 0xff;
                int rgb32 = loadIng.getRGB(x, (y + 1));
                p[7] = (rgb32 >> 8) & 0xff;
                int rgb33 = loadIng.getRGB((x + 1), (y + 1));
                p[8] = (rgb33 >> 8) & 0xff;

                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        if (p[j] > p[j + 1]) {
                            int temp = p[j];
                            p[j] = p[j + 1];
                            p[j + 1] = temp;
                        }

                    }

                }
                raster.setSample(x, y, 0, p[5]);
            }
        }
        return prosesGambar;
    }

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        // TODO add your handling code here:

        BufferedImage grayscale = medianfilter(sumber);
        int x = jLabel2.getWidth();
        int y = jLabel2.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(grayscale, x, y));
        jLabel2.setIcon(imageIcon);
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    public BufferedImage regiongrowing(String sumber) {
        int rgb = 0;
        int pixel = 0;
        int a1 = 0, a2 = 0;
        int thr = 0, ada2 = 0;
        int h = 0;
        BufferedImage prosesGambar;
        BufferedImage loadIng = loadImage(sumber);
        ukuranX = loadIng.getWidth();
        ukuranY = loadIng.getHeight();
        int Bufferku2[][] = new int[ukuranX][ukuranY];
        int Bufferku3[][] = new int[ukuranX][ukuranY];
        prosesGambar = new BufferedImage(ukuranX, ukuranY,
                BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = prosesGambar.getGraphics();
        g.drawImage(loadIng, 0, 0, null);
        WritableRaster raster = prosesGambar.getRaster();
        //inisialisasi gambar2 dan gambar3
        for (int i = 0; i < ukuranX; i++) {
            for (int j = 0; j < ukuranY; j++) {
                Bufferku2[i][j] = 255;
                Bufferku3[i][j] = 0;
            }
        }
        //mencatat posisi awal region dan dimapping di gambar 3
        int seedx = Integer.parseInt(jTextField1.getText()); // posisi awal x region
        int seedy = Integer.parseInt(jTextField2.getText()); // posisi awal y region
        Bufferku3[seedx][seedy] = 50; // mapping posisi awal di gambar 3
        ada2 = 1;
        thr = Integer.parseInt(jTextField3.getText());
        int rgbs = loadIng.getRGB(seedx, seedy);
        int alpha = (rgbs << 24) & 0xff;
        int merahg = (rgbs >> 16) & 0xff;
        int hijaug = (rgbs >> 8) & 0xff;
        int birug = (rgbs >> 0) & 0xff;
        int hijaugs = alpha | merahg << 16 | hijaug << 8 | birug;
        a1 = hijaugs - thr;
        a2 = hijaugs + thr;
        // letakkan disini code proses region growing
        while (ada2 == 1) {
            ada2 = 0;
            // cari pada gb3 apa ada yang bernilai 50
            for (int i = 1; i < ukuranX; i++) {
                for (int j = 1; j < ukuranY; j++) {
                    // ambil pixel pada posisi i,j
                    if (i == 0) {
                        Bufferku3[i][j] = 1;
                    }
                    if (i == ukuranY) {
                        Bufferku3[i][j] = 1;
                    }
                    pixel = Bufferku3[i][j];
                    // nilai pixel pada posisi i,j
                    // uji apa pixel bernilai 50
                    if (pixel == 50) {
                        ada2 = 1;
                        //====================Hijau=======================
                        //////////////////////////////////////////////////
                        rgb = loadIng.getRGB(i, j - 1);
                        int alpha2 = (rgb << 24) & 0xff;
                        int merahg2 = (rgb >> 16) & 0xff;
                        int hijaug2 = (rgb >> 8) & 0xff;
                        int birug2 = (rgb >> 0) & 0xff;

                        int hijau = alpha2 | merahg2 << 16 | hijaug2 << 8 | birug2;
                        if ((hijau >= a1) && (hijau <= a2)
                                && (Bufferku3[i][j - 1] != 200)) {
                            Bufferku3[i][j - 1] = 50;
                        }
                        rgb = loadIng.getRGB(i, j + 1);
                        hijau = alpha2 | merahg2 << 16 | hijaug2 << 8 | birug2;
                        if ((hijau >= a1) && (hijau <= a2)
                                && (Bufferku3[i][j + 1] != 200)) {
                            Bufferku3[i][j - 1] = 50;
                        }
                        rgb = loadIng.getRGB(i - 1, j);
                        hijau = alpha2 | merahg2 << 16 | hijaug2 << 8 | birug2;
                        if ((hijau >= a1) && (hijau <= a2)
                                && (Bufferku3[i - 1][j] != 200)) {
                            Bufferku3[i - 1][j] = 50;
                        }
                        rgb = loadIng.getRGB(i - 1, j + 1);
                        hijau = alpha2 | merahg2 << 16 | hijaug2 << 8 | birug2;
                        if ((hijau >= a1) && (hijau <= a2)
                                && (Bufferku3[i - 1][j + 1] != 200)) {
                            Bufferku3[i - 1][j + 1] = 50;
                        }
                        rgb = loadIng.getRGB(i - 1, j - 1);
                        hijau = alpha2 | merahg2 << 16 | hijaug2 << 8 | birug2;
                        if ((hijau >= a1) && (hijau <= a2)
                                && (Bufferku3[i - 1][j - 1] != 200)) {
                            Bufferku3[i - 1][j - 1] = 50;
                        }
                        rgb = loadIng.getRGB(i + 1, j);
                        hijau = alpha2 | merahg2 << 16 | hijaug2 << 8 | birug2;
                        if ((hijau >= a1) && (hijau <= a2)
                                && (Bufferku3[i + 1][j] != 200)) {
                            Bufferku3[i + 1][j] = 50;
                        }
                        rgb = loadIng.getRGB(i + 1, j + 1);
                        hijau = alpha2 | merahg2 << 16 | hijaug2 << 8 | birug2;
                        if ((hijau >= a1) && (hijau <= a2)
                                && (Bufferku3[i + 1][j + 1] != 200)) {
                            Bufferku3[i + 1][j + 1] = 50;
                        }
                        rgb = loadIng.getRGB(i + 1, j - 1);
                        hijau = alpha2 | merahg2 << 16 | hijaug2 << 8 | birug2;
                        if ((hijau >= a1) && (hijau <= a2)
                                && (Bufferku3[i + 1][j - 1] != 200)) {
                            Bufferku3[i + 1][j - 1] = 50;
                        }
                        //====================Hijau=======================
                        //////////////////////////////////////////////////

                        // copy kan data posisi i,j di gb1 ke posis i,j di gb2 dan
                        // set 200 pada gb3
                        rgb = loadIng.getRGB(i, j);
                        hijaug = alpha | (merahg << 16) & 0xff | (hijaug << 8) & 0xff | birug;

                        Bufferku2[i][j] = hijaug;

                        Bufferku3[i][j] = 200;
                    }
//                    
                }
            }
        }
        for (int i = 0; i < ukuranX; i++) {
            for (int j = 0; j < ukuranY; j++) {
                raster.setSample(i, j, 0, Bufferku2[i][j]);
                prosesGambar.setRGB(i, j, rgb);
            }
        }

        return prosesGambar;
    }


    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        // TODO add your handling code here:
        BufferedImage grayscale = regiongrowing(sumber);
        int x = jLabel2.getWidth();
        int y = jLabel2.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(grayscale, x, y));
        jLabel2.setIcon(imageIcon);
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    public BufferedImage regiongrowing2(String sumber) {
        int pixel = 0;
        int a1 = 0, a2 = 0;
        int b1 = 0, b2 = 0;
        int c1 = 0, c2 = 0;

        int thr = 0, ada2 = 0;
        int h = 0;
        BufferedImage prosesGambar;
        BufferedImage loadIng = loadImage(sumber);
        ukuranX = loadIng.getWidth();
        ukuranY = loadIng.getHeight();
        int Bufferku2[][] = new int[ukuranX][ukuranY];
        int Bufferku3[][] = new int[ukuranX][ukuranY];
        prosesGambar = new BufferedImage(ukuranX, ukuranY,
                BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = prosesGambar.getGraphics();
        g.drawImage(loadIng, 0, 0, null);
        WritableRaster raster = prosesGambar.getRaster();
//inisialisasi gambar2 dan gambar3
        for (int i = 0; i < ukuranX; i++) {
            for (int j = 0; j < ukuranY; j++) {
                Bufferku2[i][j] = 255;
                Bufferku3[i][j] = 0;
            }
        }
//mencatat posisi awal region dan dimapping di gambar 3
        int seedx = Integer.parseInt(jTextField1.getText()); // posisi awal x region
        int seedy = Integer.parseInt(jTextField2.getText()); // posisi awal y region
        Bufferku3[seedx][seedy] = 50; // mapping posisi awal di gambar 3
        ada2 = 1;
        thr = Integer.parseInt(jTextField3.getText());
        int rgbs = loadIng.getRGB(seedx, seedy);
        int hijaugs = (rgbs >> 8) & 0xff;

        int merahgs = (rgbs >> 16) & 0xff;
        int birugs = (rgbs >> 0) & 0xff;
        a1 = hijaugs - thr;
        a2 = hijaugs + thr;
        a1 = merahgs - thr;
        a2 = merahgs + thr;
        a1 = birugs - thr;
        a2 = birugs + thr;
// letakkan disini code proses region growing
        while (ada2 == 1) {
            ada2 = 0;
// cari pada gb3 apa ada yang bernilai 50
            for (int i = 1; i < ukuranX; i++) {
                for (int j = 1; j < ukuranY; j++) {
// ambil pixel pada posisi i,j
                    if (i == 0) {
                        Bufferku3[i][j] = 1;
                    }
                    if (i == ukuranY) {
                        Bufferku3[i][j] = 1;
                    }
                    pixel = Bufferku3[i][j]; // nilai pixel pada posisi i,j
// uji apa pixel bernilai 50
                    if (pixel == 50) {
                        ada2 = 1;
                        int rgb = loadIng.getRGB(i, j - 1);
                        int hijaug = (rgb >> 8) & 0xff;
                        if ((hijaug >= a1) && (hijaug <= a2)
                                && (Bufferku3[i][j - 1] != 200)) {
                            Bufferku3[i][j - 1] = 50;
                        }
                        rgb = loadIng.getRGB(i, j + 1);
                        hijaug = (rgb >> 8) & 0xff;
                        if ((hijaug >= a1) && (hijaug <= a2)
                                && (Bufferku3[i][j + 1] != 200)) {
                            Bufferku3[i][j - 1] = 50;
                        }
                        rgb = loadIng.getRGB(i - 1, j);
                        hijaug = (rgb >> 8) & 0xff;
                        if ((hijaug >= a1) && (hijaug <= a2)
                                && (Bufferku3[i - 1][j] != 200)) {
                            Bufferku3[i - 1][j] = 50;
                        }
                        rgb = loadIng.getRGB(i - 1, j + 1);
                        hijaug = (rgb >> 8) & 0xff;
                        if ((hijaug >= a1) && (hijaug <= a2)
                                && (Bufferku3[i - 1][j + 1] != 200)) {
                            Bufferku3[i - 1][j + 1] = 50;
                        }
                        rgb = loadIng.getRGB(i - 1, j - 1);
                        hijaug = (rgb >> 8) & 0xff;
                        if ((hijaug >= a1) && (hijaug <= a2)
                                && (Bufferku3[i - 1][j - 1] != 200)) {
                            Bufferku3[i - 1][j - 1] = 50;
                        }
                        rgb = loadIng.getRGB(i + 1, j);
                        hijaug = (rgb >> 8) & 0xff;
                        if ((hijaug >= a1) && (hijaug <= a2)
                                && (Bufferku3[i + 1][j] != 200)) {
                            Bufferku3[i + 1][j] = 50;
                        }
                        rgb = loadIng.getRGB(i + 1, j + 1);
                        hijaug = (rgb >> 8) & 0xff;
                        if ((hijaug >= a1) && (hijaug <= a2)
                                && (Bufferku3[i + 1][j + 1] != 200)) {
                            Bufferku3[i + 1][j + 1] = 50;
                        }
                        rgb = loadIng.getRGB(i + 1, j - 1);
                        hijaug = (rgb >> 8) & 0xff;
                        if ((hijaug >= a1) && (hijaug <= a2)
                                && (Bufferku3[i + 1][j - 1] != 200)) {
                            Bufferku3[i + 1][j - 1] = 50;
                        }


// copy kan data posisi i,j di gb1 ke posis i,j di gb2 dan
// set 200 pada gb3
                        rgb = loadIng.getRGB(i, j);
                        hijaug = (rgb >> 8) & 0xff;
                        Bufferku2[i][j] = hijaug;
                        Bufferku3[i][j] = 200;
                    }
                }
            }
        }
        for (int i = 0; i < ukuranX; i++) {
            for (int j = 0; j < ukuranY; j++) {
                raster.setSample(i, j, 0, Bufferku2[i][j]);
            }
        }
        return prosesGambar;
    }
    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        // TODO add your handling code here:
        BufferedImage grayscale = regiongrowing2(sumber);
        int x = jLabel2.getWidth();
        int y = jLabel2.getHeight();
        ImageIcon imageIcon = new ImageIcon(resize(grayscale, x, y));
        jLabel2.setIcon(imageIcon);
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    public static BufferedImage loadImage(String ref) {
        BufferedImage bimg = null;
        try {
            bimg = ImageIO.read(new File(ref));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return bimg;
    }

// Deklarasi Methode untuk menyesuaikan ukuran gambar dengan ukuran jLabel
    public static BufferedImage resize(BufferedImage img, int newW, int newH) {
        int w = img.getWidth();
        int h = img.getHeight();
        BufferedImage dimg = new BufferedImage(newW, newH, img.getType());
        Graphics2D g = dimg.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g.drawImage(img, 0, 0, newW, newH, 0, 0, w, h, null);
        g.dispose();
        return dimg;
    }

// deklarasi methode untuk grayscale
    public BufferedImage rgb2Gray(String sumber) {
        BufferedImage prosesGambar;
        BufferedImage loadIng = loadImage(sumber);
        ukuranX = loadIng.getWidth();
        ukuranY = loadIng.getHeight();
        prosesGambar = new BufferedImage(ukuranX, ukuranY, BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = prosesGambar.getGraphics();
        g.drawImage(loadIng, 0, 0, null);
        WritableRaster raster = prosesGambar.getRaster();
        for (int x = 0; x < ukuranX; x++) {
            for (int y = 0; y < ukuranY; y++) {
                int rgb = loadIng.getRGB(x, y);
                int alpha = (rgb << 24) & 0xff;
                int merahg = (rgb >> 16) & 0xff;
                int hijaug = (rgb >> 8) & 0xff;
                int birug = (rgb >> 0) & 0xff;
                float gray = (float) ((0.5 * merahg) + (0.3 * hijaug) + (0.2 * birug));
                raster.setSample(x, y, 0, gray);
            }
        }
        return prosesGambar;
    }

    public void drawHistogram(BufferedImage gmbar, String hs1) {
        int widht = gmbar.getWidth();
        int height = gmbar.getHeight();
        int count[][] = new int[4][0x100];
        int RED = 0;
        int BLUE = 1;
        int GREEN = 2;
        int total = widht * height;
        for (int x = 0; x < widht; x++) {
            for (int y = 0; y < height; y++) {
                int rgb = gmbar.getRGB(x, y);
                int merahg = (rgb & 0x00ff0000) >> 16;
                int hijaug = (rgb & 0x0000ff00) >> 8;
                int birug = (rgb & 0x000000ff);
                int gray = (merahg + hijaug + birug) / 3;
                count[RED][merahg]++;
                count[GREEN][hijaug]++;
                count[BLUE][birug]++;
                count[3][gray]++;

            }
        }
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int f = 0; f < 0x100; f++) {
            dataset.addValue(count[0][f], "Red", new Integer(f));
            dataset.addValue(count[2][f], "Blue", new Integer(f));
            dataset.addValue(count[1][f], "Green", new Integer(f));
            dataset.addValue(count[3][f], "Black", new Integer(f));
        }
        JFreeChart histo = ChartFactory.createBarChart("Histogram Citra", "Nilai",
                "Frekuensi", dataset, PlotOrientation.VERTICAL, true, false, false);

        ChartFrame frame = new ChartFrame("histogram Citra", histo);
        histo.setBackgroundPaint(Color.white);
        final CategoryPlot plot = (CategoryPlot) histo.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        plot.setRangeMinorGridlinePaint(Color.white);
        frame.setSize(500, 350);
        frame.setVisible(true);
        frame.setLocation(380, 200);
        frame.setTitle(hs1);
        String status = frame.getTitle();

    }

    public BufferedImage brigthness(String sumber, int cerah) {
        BufferedImage prosesGambar;
        BufferedImage loadIng = loadImage(sumber);
        ukuranX = loadIng.getWidth();
        ukuranY = loadIng.getHeight();
        prosesGambar = new BufferedImage(ukuranX, ukuranY, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesGambar.getGraphics();
        g.drawImage(loadIng, 0, 0, null);
        WritableRaster raster = prosesGambar.getRaster();
        for (int x = 0; x < ukuranX; x++) {
            for (int y = 0; y < ukuranY; y++) {
                int rgb = loadIng.getRGB(x, y);
                int alpha = (rgb << 24) & 0xff;
                int merahg = (rgb >> 16) & 0xff;
                int hijaug = (rgb >> 8) & 0xff;
                int birug = (rgb >> 0) & 0xff;
                int gray = ((merahg) + (hijaug) + (birug)) / 3;
                int merah2 = merahg + cerah;
                int hijau2 = hijaug + cerah;
                int biru2 = birug + cerah;

                if (merah2 < 0) {
                    merah2 = 0;
                }
                if (hijau2 < 0) {
                    hijau2 = 0;
                }
                if (biru2 < 0) {
                    biru2 = 0;
                }
                if (merah2 > 255) {
                    merah2 = 255;
                }
                if (hijau2 > 255) {
                    hijau2 = 255;
                }
                if (biru2 > 255) {
                    biru2 = 255;
                }
                int rgb2 = alpha | merah2 << 16 | hijau2 << 8 | biru2;
                prosesGambar.setRGB(x, y, rgb2);
            }
        }
        return prosesGambar;
    }

    public BufferedImage kontras(String sumber, int kontras) {
        {
            BufferedImage prosesGambar;
            BufferedImage loadIng = loadImage(sumber);
            ukuranX = loadIng.getWidth();
            ukuranY = loadIng.getHeight();
            prosesGambar = new BufferedImage(ukuranX, ukuranY, BufferedImage.TYPE_INT_RGB);
            Graphics g = prosesGambar.getGraphics();
            g.drawImage(loadIng, 0, 0, null);
            WritableRaster raster = prosesGambar.getRaster();
            for (int x = 0; x < ukuranX; x++) {
                for (int y = 0; y < ukuranY; y++) {
                    int rgb = loadIng.getRGB(x, y);
                    int alpha = (rgb << 24) & 0xff;
                    int merahg = (rgb >> 16) & 0xff;
                    int hijaug = (rgb >> 8) & 0xff;
                    int birug = (rgb >> 0) & 0xff;
                    int gray = ((merahg) + (hijaug) + (birug)) / 3;
                    int merah2 = 0, hijau2 = 0, biru2 = 0;
                    if (merahg > 128) {
                        merah2 = merahg + kontras;
                    } else {
                        merah2 = merahg - kontras;
                    }
                    if (hijaug > 128) {
                        hijau2 = hijaug + kontras;
                    } else {
                        hijau2 = hijaug - kontras;
                    }
                    if (birug > 128) {
                        biru2 = birug + kontras;
                    } else {
                        biru2 = birug + kontras;
                    }
                    if (merah2 < 0) {
                        merah2 = 0;
                    }
                    if (hijau2 < 0) {
                        hijau2 = 0;
                    }
                    if (biru2 < 0) {
                        biru2 = 0;
                    }
                    if (merah2 > 255) {
                        merah2 = 255;
                    }
                    if (hijau2 > 255) {
                        hijau2 = 255;
                    }
                    if (biru2 > 255) {
                        biru2 = 255;
                    }
                    int rgb2 = alpha | merah2 << 16 | hijau2 << 8 | biru2;
                    prosesGambar.setRGB(x, y, rgb2);
                }
            }
            return prosesGambar;
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Praktikum4.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Praktikum4.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Praktikum4.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Praktikum4.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Praktikum11().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollBar jScrollBar2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
